@page "/Todos"
@using ToDoWebClient.Models
@using ToDoWebClient.Data
@using System.Collections
@using Microsoft.AspNetCore.Mvc.Filters
@inject ITodosData TodoData
@inject NavigationManager NavMgr
<h3>Todo List</h3>
<p>Filter by UserID: <input type="number" @oninput="@((arg) => FilterByUserId(arg))" style="width: 50px"/></p>
<p>
    Filter by completed status:
    <select class="form-control selectpicker" @onchange="@((arg) => FilterByCompletedStatus(arg))" style="width: 100px">
        <option>Both</option>
        <option>False</option>
        <option>True</option>
    </select>
</p>
@if (todosToShow == null)
{
    <p>
        <em> Loading...</em>
    </p>
}
else if (!todosToShow.Any())
{
    <p>
        <em> No todos items exist.Please add some</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Todo ID</th>
            <th>Title</th>
            <th>Completed?</th>
            <th>Remove</th>
            <th>Edit</th>
        </tr>
        </thead>

        <tbody >


        @foreach (var item in todosToShow)
        {
            <tr>
                <td>@item.UserId</td>
                <td> @item.TodoId</td>
                <td> @item.Title</td>
                <td>
                    <input type="checkbox" checked="@item.IsCompleted" @onchange="@((arg) => CompletedChange(arg, item))"/>
                </td>
                <td>
                    <button @onclick="@(() => RemoveTodo(item.TodoId))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => Edit(item.TodoId))">
                        <i class="oi oi-pencil" style="color:#1b6ec2"></i>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private IList<ToDo> allTodos;
    private IList<ToDo> todosToShow;

    private int? filterById;
    private bool? filterByIsCompleted;

    protected override async Task OnInitializedAsync()
    {
        allTodos = await TodoData.GetTodosAsync();
        
        todosToShow = allTodos;
    }

    private async Task RemoveTodo(int todoId)
    {
        ToDo toDoToRemove = todosToShow.First(t => t.TodoId == todoId);
        await TodoData.RemoveTodoAsync(todoId);
        todosToShow.Remove(toDoToRemove);
    }

    private async Task CompletedChange(ChangeEventArgs evt, ToDo toDo)
    {
        toDo.IsCompleted = (bool) evt.Value;
      await  TodoData.UpdateAsync(toDo);
    }

    private void FilterByUserId(ChangeEventArgs eventArg)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(eventArg.Value.ToString());
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void FilterByCompletedStatus(ChangeEventArgs eventArg)
    {
        filterByIsCompleted = null;
        try
        {
            filterByIsCompleted = bool.Parse(eventArg.Value.ToString());
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        todosToShow = allTodos.Where(t => (filterById != null && t.UserId == filterById || filterById == null)
                                          && (filterByIsCompleted != null && t.IsCompleted == filterByIsCompleted || filterByIsCompleted == null)).ToList();
    }

    private void Edit(int id)
    {
        NavMgr.NavigateTo($"Edit/{id}");
    }


}